# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `SmartHome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'

if 'Color' not in _M_SmartHome.__dict__:
    _M_SmartHome.Color = Ice.createTempClass()
    class Color(object):
        def __init__(self, r=0.0, g=0.0, b=0.0):
            self.r = r
            self.g = g
            self.b = b

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.Color):
                return NotImplemented
            else:
                if self.r != other.r:
                    return False
                if self.g != other.g:
                    return False
                if self.b != other.b:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_Color)

        __repr__ = __str__

    _M_SmartHome._t_Color = IcePy.defineStruct('::SmartHome::Color', Color, (), (
        ('r', (), IcePy._t_float),
        ('g', (), IcePy._t_float),
        ('b', (), IcePy._t_float)
    ))

    _M_SmartHome.Color = Color
    del Color

if 'DateTime' not in _M_SmartHome.__dict__:
    _M_SmartHome.DateTime = Ice.createTempClass()
    class DateTime(object):
        def __init__(self, year=0, month=0, day=0, hour=0, minute=0):
            self.year = year
            self.month = month
            self.day = day
            self.hour = hour
            self.minute = minute

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.year)
            _h = 5 * _h + Ice.getHash(self.month)
            _h = 5 * _h + Ice.getHash(self.day)
            _h = 5 * _h + Ice.getHash(self.hour)
            _h = 5 * _h + Ice.getHash(self.minute)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.DateTime):
                return NotImplemented
            else:
                if self.year is None or other.year is None:
                    if self.year != other.year:
                        return (-1 if self.year is None else 1)
                else:
                    if self.year < other.year:
                        return -1
                    elif self.year > other.year:
                        return 1
                if self.month is None or other.month is None:
                    if self.month != other.month:
                        return (-1 if self.month is None else 1)
                else:
                    if self.month < other.month:
                        return -1
                    elif self.month > other.month:
                        return 1
                if self.day is None or other.day is None:
                    if self.day != other.day:
                        return (-1 if self.day is None else 1)
                else:
                    if self.day < other.day:
                        return -1
                    elif self.day > other.day:
                        return 1
                if self.hour is None or other.hour is None:
                    if self.hour != other.hour:
                        return (-1 if self.hour is None else 1)
                else:
                    if self.hour < other.hour:
                        return -1
                    elif self.hour > other.hour:
                        return 1
                if self.minute is None or other.minute is None:
                    if self.minute != other.minute:
                        return (-1 if self.minute is None else 1)
                else:
                    if self.minute < other.minute:
                        return -1
                    elif self.minute > other.minute:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DateTime)

        __repr__ = __str__

    _M_SmartHome._t_DateTime = IcePy.defineStruct('::SmartHome::DateTime', DateTime, (), (
        ('year', (), IcePy._t_int),
        ('month', (), IcePy._t_int),
        ('day', (), IcePy._t_int),
        ('hour', (), IcePy._t_int),
        ('minute', (), IcePy._t_int)
    ))

    _M_SmartHome.DateTime = DateTime
    del DateTime

if 'Recording' not in _M_SmartHome.__dict__:
    _M_SmartHome.Recording = Ice.createTempClass()
    class Recording(object):
        def __init__(self, fromDate=Ice._struct_marker, toDate=Ice._struct_marker):
            if fromDate is Ice._struct_marker:
                self.fromDate = _M_SmartHome.DateTime()
            else:
                self.fromDate = fromDate
            if toDate is Ice._struct_marker:
                self.toDate = _M_SmartHome.DateTime()
            else:
                self.toDate = toDate

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.fromDate)
            _h = 5 * _h + Ice.getHash(self.toDate)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.Recording):
                return NotImplemented
            else:
                if self.fromDate is None or other.fromDate is None:
                    if self.fromDate != other.fromDate:
                        return (-1 if self.fromDate is None else 1)
                else:
                    if self.fromDate < other.fromDate:
                        return -1
                    elif self.fromDate > other.fromDate:
                        return 1
                if self.toDate is None or other.toDate is None:
                    if self.toDate != other.toDate:
                        return (-1 if self.toDate is None else 1)
                else:
                    if self.toDate < other.toDate:
                        return -1
                    elif self.toDate > other.toDate:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_Recording)

        __repr__ = __str__

    _M_SmartHome._t_Recording = IcePy.defineStruct('::SmartHome::Recording', Recording, (), (
        ('fromDate', (), _M_SmartHome._t_DateTime),
        ('toDate', (), _M_SmartHome._t_DateTime)
    ))

    _M_SmartHome.Recording = Recording
    del Recording

if 'InvaildColorException' not in _M_SmartHome.__dict__:
    _M_SmartHome.InvaildColorException = Ice.createTempClass()
    class InvaildColorException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::InvaildColorException'

    _M_SmartHome._t_InvaildColorException = IcePy.defineException('::SmartHome::InvaildColorException', InvaildColorException, (), False, None, ())
    InvaildColorException._ice_type = _M_SmartHome._t_InvaildColorException

    _M_SmartHome.InvaildColorException = InvaildColorException
    del InvaildColorException

if 'InvalidDateException' not in _M_SmartHome.__dict__:
    _M_SmartHome.InvalidDateException = Ice.createTempClass()
    class InvalidDateException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::InvalidDateException'

    _M_SmartHome._t_InvalidDateException = IcePy.defineException('::SmartHome::InvalidDateException', InvalidDateException, (), False, None, ())
    InvalidDateException._ice_type = _M_SmartHome._t_InvalidDateException

    _M_SmartHome.InvalidDateException = InvalidDateException
    del InvalidDateException

if 'IvalidTimeBlockAException' not in _M_SmartHome.__dict__:
    _M_SmartHome.IvalidTimeBlockAException = Ice.createTempClass()
    class IvalidTimeBlockAException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::IvalidTimeBlockAException'

    _M_SmartHome._t_IvalidTimeBlockAException = IcePy.defineException('::SmartHome::IvalidTimeBlockAException', IvalidTimeBlockAException, (), False, None, ())
    IvalidTimeBlockAException._ice_type = _M_SmartHome._t_IvalidTimeBlockAException

    _M_SmartHome.IvalidTimeBlockAException = IvalidTimeBlockAException
    del IvalidTimeBlockAException

_M_SmartHome._t_LightBulb = IcePy.defineValue('::SmartHome::LightBulb', Ice.Value, -1, (), False, True, None, ())

if 'LightBulbPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.LightBulbPrx = Ice.createTempClass()
    class LightBulbPrx(Ice.ObjectPrx):

        def getState(self, context=None):
            return _M_SmartHome.LightBulb._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_SmartHome.LightBulb._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.LightBulb._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_SmartHome.LightBulb._op_getState.end(self, _r)

        def setState(self, newState, context=None):
            return _M_SmartHome.LightBulb._op_setState.invoke(self, ((newState, ), context))

        def setStateAsync(self, newState, context=None):
            return _M_SmartHome.LightBulb._op_setState.invokeAsync(self, ((newState, ), context))

        def begin_setState(self, newState, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.LightBulb._op_setState.begin(self, ((newState, ), _response, _ex, _sent, context))

        def end_setState(self, _r):
            return _M_SmartHome.LightBulb._op_setState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.LightBulbPrx.ice_checkedCast(proxy, '::SmartHome::LightBulb', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.LightBulbPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::LightBulb'
    _M_SmartHome._t_LightBulbPrx = IcePy.defineProxy('::SmartHome::LightBulb', LightBulbPrx)

    _M_SmartHome.LightBulbPrx = LightBulbPrx
    del LightBulbPrx

    _M_SmartHome.LightBulb = Ice.createTempClass()
    class LightBulb(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::LightBulb')

        def ice_id(self, current=None):
            return '::SmartHome::LightBulb'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::LightBulb'

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def setState(self, newState, current=None):
            raise NotImplementedError("servant method 'setState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_LightBulbDisp)

        __repr__ = __str__

    _M_SmartHome._t_LightBulbDisp = IcePy.defineClass('::SmartHome::LightBulb', LightBulb, (), None, ())
    LightBulb._ice_type = _M_SmartHome._t_LightBulbDisp

    LightBulb._op_getState = IcePy.Operation('getState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    LightBulb._op_setState = IcePy.Operation('setState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())

    _M_SmartHome.LightBulb = LightBulb
    del LightBulb

_M_SmartHome._t_Fridge = IcePy.defineValue('::SmartHome::Fridge', Ice.Value, -1, (), False, True, None, ())

if 'FridgePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.FridgePrx = Ice.createTempClass()
    class FridgePrx(Ice.ObjectPrx):

        def getTemperature(self, context=None):
            return _M_SmartHome.Fridge._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_SmartHome.Fridge._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Fridge._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_SmartHome.Fridge._op_getTemperature.end(self, _r)

        def setTemperature(self, newTemperature, context=None):
            return _M_SmartHome.Fridge._op_setTemperature.invoke(self, ((newTemperature, ), context))

        def setTemperatureAsync(self, newTemperature, context=None):
            return _M_SmartHome.Fridge._op_setTemperature.invokeAsync(self, ((newTemperature, ), context))

        def begin_setTemperature(self, newTemperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Fridge._op_setTemperature.begin(self, ((newTemperature, ), _response, _ex, _sent, context))

        def end_setTemperature(self, _r):
            return _M_SmartHome.Fridge._op_setTemperature.end(self, _r)

        def getDoorState(self, context=None):
            return _M_SmartHome.Fridge._op_getDoorState.invoke(self, ((), context))

        def getDoorStateAsync(self, context=None):
            return _M_SmartHome.Fridge._op_getDoorState.invokeAsync(self, ((), context))

        def begin_getDoorState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Fridge._op_getDoorState.begin(self, ((), _response, _ex, _sent, context))

        def end_getDoorState(self, _r):
            return _M_SmartHome.Fridge._op_getDoorState.end(self, _r)

        def setDoorState(self, newDoorState, context=None):
            return _M_SmartHome.Fridge._op_setDoorState.invoke(self, ((newDoorState, ), context))

        def setDoorStateAsync(self, newDoorState, context=None):
            return _M_SmartHome.Fridge._op_setDoorState.invokeAsync(self, ((newDoorState, ), context))

        def begin_setDoorState(self, newDoorState, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Fridge._op_setDoorState.begin(self, ((newDoorState, ), _response, _ex, _sent, context))

        def end_setDoorState(self, _r):
            return _M_SmartHome.Fridge._op_setDoorState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.FridgePrx.ice_checkedCast(proxy, '::SmartHome::Fridge', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.FridgePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Fridge'
    _M_SmartHome._t_FridgePrx = IcePy.defineProxy('::SmartHome::Fridge', FridgePrx)

    _M_SmartHome.FridgePrx = FridgePrx
    del FridgePrx

    _M_SmartHome.Fridge = Ice.createTempClass()
    class Fridge(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Fridge')

        def ice_id(self, current=None):
            return '::SmartHome::Fridge'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Fridge'

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def setTemperature(self, newTemperature, current=None):
            raise NotImplementedError("servant method 'setTemperature' not implemented")

        def getDoorState(self, current=None):
            raise NotImplementedError("servant method 'getDoorState' not implemented")

        def setDoorState(self, newDoorState, current=None):
            raise NotImplementedError("servant method 'setDoorState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_FridgeDisp)

        __repr__ = __str__

    _M_SmartHome._t_FridgeDisp = IcePy.defineClass('::SmartHome::Fridge', Fridge, (), None, ())
    Fridge._ice_type = _M_SmartHome._t_FridgeDisp

    Fridge._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Fridge._op_setTemperature = IcePy.Operation('setTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())
    Fridge._op_getDoorState = IcePy.Operation('getDoorState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Fridge._op_setDoorState = IcePy.Operation('setDoorState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())

    _M_SmartHome.Fridge = Fridge
    del Fridge

_M_SmartHome._t_RGBBulb = IcePy.defineValue('::SmartHome::RGBBulb', Ice.Value, -1, (), False, True, None, ())

if 'RGBBulbPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.RGBBulbPrx = Ice.createTempClass()
    class RGBBulbPrx(_M_SmartHome.LightBulbPrx):

        def getColor(self, context=None):
            return _M_SmartHome.RGBBulb._op_getColor.invoke(self, ((), context))

        def getColorAsync(self, context=None):
            return _M_SmartHome.RGBBulb._op_getColor.invokeAsync(self, ((), context))

        def begin_getColor(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RGBBulb._op_getColor.begin(self, ((), _response, _ex, _sent, context))

        def end_getColor(self, _r):
            return _M_SmartHome.RGBBulb._op_getColor.end(self, _r)

        def setColor(self, color, context=None):
            return _M_SmartHome.RGBBulb._op_setColor.invoke(self, ((color, ), context))

        def setColorAsync(self, color, context=None):
            return _M_SmartHome.RGBBulb._op_setColor.invokeAsync(self, ((color, ), context))

        def begin_setColor(self, color, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RGBBulb._op_setColor.begin(self, ((color, ), _response, _ex, _sent, context))

        def end_setColor(self, _r):
            return _M_SmartHome.RGBBulb._op_setColor.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.RGBBulbPrx.ice_checkedCast(proxy, '::SmartHome::RGBBulb', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.RGBBulbPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::RGBBulb'
    _M_SmartHome._t_RGBBulbPrx = IcePy.defineProxy('::SmartHome::RGBBulb', RGBBulbPrx)

    _M_SmartHome.RGBBulbPrx = RGBBulbPrx
    del RGBBulbPrx

    _M_SmartHome.RGBBulb = Ice.createTempClass()
    class RGBBulb(_M_SmartHome.LightBulb):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::LightBulb', '::SmartHome::RGBBulb')

        def ice_id(self, current=None):
            return '::SmartHome::RGBBulb'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::RGBBulb'

        def getColor(self, current=None):
            raise NotImplementedError("servant method 'getColor' not implemented")

        def setColor(self, color, current=None):
            raise NotImplementedError("servant method 'setColor' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_RGBBulbDisp)

        __repr__ = __str__

    _M_SmartHome._t_RGBBulbDisp = IcePy.defineClass('::SmartHome::RGBBulb', RGBBulb, (), None, (_M_SmartHome._t_LightBulbDisp,))
    RGBBulb._ice_type = _M_SmartHome._t_RGBBulbDisp

    RGBBulb._op_getColor = IcePy.Operation('getColor', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_Color, False, 0), ())
    RGBBulb._op_setColor = IcePy.Operation('setColor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHome._t_Color, False, 0),), (), None, (_M_SmartHome._t_InvaildColorException,))

    _M_SmartHome.RGBBulb = RGBBulb
    del RGBBulb

_M_SmartHome._t_MonitoringCamera = IcePy.defineValue('::SmartHome::MonitoringCamera', Ice.Value, -1, (), False, True, None, ())

if 'MonitoringCameraPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.MonitoringCameraPrx = Ice.createTempClass()
    class MonitoringCameraPrx(Ice.ObjectPrx):

        def saveRecording(self, _from, to, context=None):
            return _M_SmartHome.MonitoringCamera._op_saveRecording.invoke(self, ((_from, to), context))

        def saveRecordingAsync(self, _from, to, context=None):
            return _M_SmartHome.MonitoringCamera._op_saveRecording.invokeAsync(self, ((_from, to), context))

        def begin_saveRecording(self, _from, to, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.MonitoringCamera._op_saveRecording.begin(self, ((_from, to), _response, _ex, _sent, context))

        def end_saveRecording(self, _r):
            return _M_SmartHome.MonitoringCamera._op_saveRecording.end(self, _r)

        def getLastRecording(self, context=None):
            return _M_SmartHome.MonitoringCamera._op_getLastRecording.invoke(self, ((), context))

        def getLastRecordingAsync(self, context=None):
            return _M_SmartHome.MonitoringCamera._op_getLastRecording.invokeAsync(self, ((), context))

        def begin_getLastRecording(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.MonitoringCamera._op_getLastRecording.begin(self, ((), _response, _ex, _sent, context))

        def end_getLastRecording(self, _r):
            return _M_SmartHome.MonitoringCamera._op_getLastRecording.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.MonitoringCameraPrx.ice_checkedCast(proxy, '::SmartHome::MonitoringCamera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.MonitoringCameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::MonitoringCamera'
    _M_SmartHome._t_MonitoringCameraPrx = IcePy.defineProxy('::SmartHome::MonitoringCamera', MonitoringCameraPrx)

    _M_SmartHome.MonitoringCameraPrx = MonitoringCameraPrx
    del MonitoringCameraPrx

    _M_SmartHome.MonitoringCamera = Ice.createTempClass()
    class MonitoringCamera(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::MonitoringCamera')

        def ice_id(self, current=None):
            return '::SmartHome::MonitoringCamera'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::MonitoringCamera'

        def saveRecording(self, _from, to, current=None):
            raise NotImplementedError("servant method 'saveRecording' not implemented")

        def getLastRecording(self, current=None):
            raise NotImplementedError("servant method 'getLastRecording' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_MonitoringCameraDisp)

        __repr__ = __str__

    _M_SmartHome._t_MonitoringCameraDisp = IcePy.defineClass('::SmartHome::MonitoringCamera', MonitoringCamera, (), None, ())
    MonitoringCamera._ice_type = _M_SmartHome._t_MonitoringCameraDisp

    MonitoringCamera._op_saveRecording = IcePy.Operation('saveRecording', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHome._t_DateTime, False, 0), ((), _M_SmartHome._t_DateTime, False, 0)), (), None, (_M_SmartHome._t_InvalidDateException, _M_SmartHome._t_IvalidTimeBlockAException))
    MonitoringCamera._op_getLastRecording = IcePy.Operation('getLastRecording', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_Recording, False, 0), ())

    _M_SmartHome.MonitoringCamera = MonitoringCamera
    del MonitoringCamera

_M_SmartHome._t_Bulbulator = IcePy.defineValue('::SmartHome::Bulbulator', Ice.Value, -1, (), False, True, None, ())

if 'BulbulatorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.BulbulatorPrx = Ice.createTempClass()
    class BulbulatorPrx(Ice.ObjectPrx):

        def mumble(self, context=None):
            return _M_SmartHome.Bulbulator._op_mumble.invoke(self, ((), context))

        def mumbleAsync(self, context=None):
            return _M_SmartHome.Bulbulator._op_mumble.invokeAsync(self, ((), context))

        def begin_mumble(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Bulbulator._op_mumble.begin(self, ((), _response, _ex, _sent, context))

        def end_mumble(self, _r):
            return _M_SmartHome.Bulbulator._op_mumble.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.BulbulatorPrx.ice_checkedCast(proxy, '::SmartHome::Bulbulator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.BulbulatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Bulbulator'
    _M_SmartHome._t_BulbulatorPrx = IcePy.defineProxy('::SmartHome::Bulbulator', BulbulatorPrx)

    _M_SmartHome.BulbulatorPrx = BulbulatorPrx
    del BulbulatorPrx

    _M_SmartHome.Bulbulator = Ice.createTempClass()
    class Bulbulator(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Bulbulator')

        def ice_id(self, current=None):
            return '::SmartHome::Bulbulator'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Bulbulator'

        def mumble(self, current=None):
            raise NotImplementedError("servant method 'mumble' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_BulbulatorDisp)

        __repr__ = __str__

    _M_SmartHome._t_BulbulatorDisp = IcePy.defineClass('::SmartHome::Bulbulator', Bulbulator, (), None, ())
    Bulbulator._ice_type = _M_SmartHome._t_BulbulatorDisp

    Bulbulator._op_mumble = IcePy.Operation('mumble', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_SmartHome.Bulbulator = Bulbulator
    del Bulbulator

# End of module SmartHome

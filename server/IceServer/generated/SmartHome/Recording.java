//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `SmartHome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package SmartHome;

public class Recording implements java.lang.Cloneable,
                                  java.io.Serializable
{
    public DateTime fromDate;

    public DateTime toDate;

    public Recording()
    {
        this.fromDate = new DateTime();
        this.toDate = new DateTime();
    }

    public Recording(DateTime fromDate, DateTime toDate)
    {
        this.fromDate = fromDate;
        this.toDate = toDate;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Recording r = null;
        if(rhs instanceof Recording)
        {
            r = (Recording)rhs;
        }

        if(r != null)
        {
            if(this.fromDate != r.fromDate)
            {
                if(this.fromDate == null || r.fromDate == null || !this.fromDate.equals(r.fromDate))
                {
                    return false;
                }
            }
            if(this.toDate != r.toDate)
            {
                if(this.toDate == null || r.toDate == null || !this.toDate.equals(r.toDate))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::SmartHome::Recording");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fromDate);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, toDate);
        return h_;
    }

    public Recording clone()
    {
        Recording c = null;
        try
        {
            c = (Recording)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        DateTime.ice_write(ostr, this.fromDate);
        DateTime.ice_write(ostr, this.toDate);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.fromDate = DateTime.ice_read(istr);
        this.toDate = DateTime.ice_read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Recording v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Recording ice_read(com.zeroc.Ice.InputStream istr)
    {
        Recording v = new Recording();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Recording> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Recording v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(40);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<Recording> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(Recording.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Recording _nullMarshalValue = new Recording();

    /** @hidden */
    public static final long serialVersionUID = -866099875L;
}
